kind: pipeline
type: docker
name: deploy-to-droplet

trigger:
  branch:
    - main
  event:
    - push

steps:
  - name: build
    image: node:18-alpine
    commands:
      - npm install
      - npm run build

  - name: deploy
    image: alpine:latest
    depends_on:
      - build
    environment:
      DROPLET_HOST:
        from_secret: droplet_host
      DROPLET_USER:
        from_secret: droplet_user
      SSH_PRIVATE_KEY:
        from_secret: ssh_private_key
    commands:
      - apk add --no-cache openssh-client rsync
      - mkdir -p ~/.ssh
      - echo "$${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - ssh-keyscan -H "$${DROPLET_HOST}" >> ~/.ssh/known_hosts
      - |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        sudo mkdir -p /var/www/portfolio-live
        sudo chown -R www-data:www-data /var/www/portfolio-live
        sudo systemctl reload nginx
        EOF
      - scp deploy.sh $${DROPLET_USER}@$${DROPLET_HOST}:~/
      - rsync -avz --delete --rsync-path="sudo rsync" dist/ $${DROPLET_USER}@$${DROPLET_HOST}:/var/www/portfolio-live/
      - ssh $${DROPLET_USER}@$${DROPLET_HOST} "chmod +x ~/deploy.sh && ~/deploy.sh && rm ~/deploy.sh"

---
kind: pipeline
type: docker
name: pr-check

trigger:
  event:
    - pull_request

steps:
  - name: build-validation
    image: node:18-alpine
    commands:
      - npm install
      - npm run build
      # Validate build artifacts
      - echo "🔍 Validating build output..."
      - ls -la dist/
      - test -f dist/index.html || (echo "❌ Missing index.html" && exit 1)
      - test -d dist/assets || (echo "❌ Missing assets directory" && exit 1)
      - echo "✅ Build validation completed successfully!"
